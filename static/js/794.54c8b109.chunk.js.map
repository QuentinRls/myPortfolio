{"version":3,"file":"static/js/794.54c8b109.chunk.js","mappings":"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","sources":["ressources/workRessource.js","sections/work.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport lottie from 'lottie-web';\r\nimport \"../style/work.css\"\r\n\r\n\r\nexport const workInfos = [\r\n  {\r\n    companyName: 'Société Générale',\r\n    companyLink: 'https://particuliers.sg.fr/',\r\n    position: 'Engineer',\r\n    dateRange: 'May 2018 – Present',\r\n    tasks: [\r\n      'Write modern, performant, maintainable code for a diverse array of client and internal projects',\r\n      'Work with a variety of different languages, platforms, frameworks, and content management systems such as JavaScript, TypeScript, Gatsby, React, Craft, WordPress, Prismic, and Netlify',\r\n      'Communicate with multi-disciplinary teams of engineers, designers, producers, and clients on a daily basis'\r\n    ]\r\n  },\r\n  {\r\n    companyName: 'Extia',\r\n    companyLink: 'https://www.extia-group.com/',\r\n    position: 'Consultant',\r\n    dateRange: 'Jan 2015 – Apr 2018',\r\n    tasks: [\r\n      'Provided strategic consulting services to optimize business processes',\r\n      'Collaborated with clients to deliver technology-driven solutions',\r\n      'Led a team of developers in agile software development practices'\r\n    ]\r\n  },\r\n  {\r\n    companyName: 'Event Maker',\r\n    companyLink: 'https://www.eventmaker.com/en/',\r\n    position: 'Developer',\r\n    dateRange: 'Jun 2012 – Dec 2014',\r\n    tasks: [\r\n      'Developed and maintained event management software',\r\n      'Designed user-friendly interfaces in collaboration with UX designers',\r\n      'Implemented new features and managed continuous integration and deployment'\r\n    ]\r\n  },\r\n  {\r\n    companyName: 'Infopro Digital',\r\n    companyLink: 'https://www.infopro-digital.com/',\r\n    position: 'Software Architect',\r\n    dateRange: 'Mar 2010 – May 2012',\r\n    tasks: [\r\n      'Architected robust software solutions for various digital products',\r\n      'Conducted code reviews and mentored junior developers',\r\n      'Ensured scalability and performance of web applications'\r\n    ]\r\n  }\r\n];\r\n\r\n\r\nexport const LottieAnimation = ({ animationData }) => {\r\n  const animationContainer = useRef(null);\r\n  const animationInstance = useRef(null);\r\n\r\n  useEffect(() => {\r\n    animationInstance.current = lottie.loadAnimation({\r\n      container: animationContainer.current,\r\n      renderer: 'svg',\r\n      loop: false,\r\n      autoplay: true,\r\n      animationData: animationData,\r\n    });\r\n\r\n    animationInstance.current.setSpeed(0.5);\r\n\r\n    const handleEnterFrame = () => {\r\n      if (animationInstance.current.playDirection === 1) {\r\n        if (animationInstance.current.currentFrame >= animationInstance.current.totalFrames - 32) {\r\n          animationInstance.current.setDirection(-1);\r\n        }\r\n      } else {\r\n        if (animationInstance.current.currentFrame <= 53) {\r\n          animationInstance.current.setDirection(1);\r\n        }\r\n      }\r\n    };\r\n\r\n    animationInstance.current.addEventListener('enterFrame', handleEnterFrame);\r\n    return () => {\r\n      animationInstance.current.removeEventListener('enterFrame', handleEnterFrame);\r\n      animationInstance.current.destroy();\r\n    };\r\n  }, [animationData]);\r\n\r\n  return <div ref={animationContainer} className='reactAnim'></div>;\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { workInfos } from '../ressources/workRessource';\r\nimport animationData from \"../image/reactAnimated.json\";\r\nimport { LottieAnimation } from '../ressources/workRessource';\r\nimport \"../style/work.css\";\r\n\r\nconst createTextLink = (url, className, text) => (\r\n    <a href={url} className={className} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        {text}\r\n    </a>\r\n);\r\n\r\nconst WorkInfoFace = ({ faceClass, children }) => {\r\n    let className;\r\n\r\n    switch (faceClass) {\r\n        case \"show-front\":\r\n            className = 'cube__face--front';\r\n            break;\r\n        case \"show-right\":\r\n            className = 'cube__face--right';\r\n            break;\r\n        case \"show-bottom\":\r\n            className = 'cube__face--bottom';\r\n            break;\r\n        case \"show-left\":\r\n            className = 'cube__face--left';\r\n            break;\r\n        default:\r\n            className = 'cube__face--front';\r\n    }\r\n    return <div className={`cube__face ${className}`}>{children}</div>;\r\n};\r\n\r\nconst WorkInfoContent = () => {\r\n    return (\r\n        <div className=\"MainWorkInfoContent cube cube--rotate\">\r\n            <WorkInfoFace faceClass=\"show-front\">\r\n                {renderWorkInfo(workInfos[0])}\r\n            </WorkInfoFace>\r\n            <WorkInfoFace faceClass=\"show-right\">\r\n                {renderWorkInfo(workInfos[1])}\r\n            </WorkInfoFace>\r\n            <WorkInfoFace faceClass=\"show-bottom\">\r\n                {renderWorkInfo(workInfos[2])}\r\n            </WorkInfoFace>\r\n            <WorkInfoFace faceClass=\"show-left\">\r\n                {renderWorkInfo(workInfos[3])}\r\n            </WorkInfoFace>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst renderWorkInfo = (info) => { \r\n    if (!info) return null;\r\n    return (\r\n        <>\r\n            <h2 className='WorkInfoContentTitle'>{info.position} @{createTextLink(info.companyLink, 'textLinkUnderline', info.companyName)}</h2>\r\n            <p className=\"experience-date\">{info.dateRange}</p>\r\n            <ul className=\"experience-list\">\r\n                {info.tasks.map((task, index) => (\r\n                    <li key={index}>{task}</li>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    );\r\n};\r\n\r\nconst WorkInfo = ({ selectedButton }) => {\r\n    const [rotationClass, setRotationClass] = useState('show-front');\r\n\r\n    useEffect(() => {\r\n        setRotationClass(determineRotationClass(selectedButton));\r\n    }, [selectedButton]);\r\n\r\n    const determineRotationClass = (buttonIndex) => {\r\n        switch (buttonIndex) {\r\n            case 0:\r\n                return 'show-front';\r\n            case 1:\r\n                return 'show-right';\r\n            case 2:\r\n                return 'show-bottom';\r\n            case 3:\r\n                return 'show-left';\r\n            default:\r\n                return 'show-front';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={`cube ${rotationClass} cube--rotate`}>\r\n            <WorkInfoContent rotationClass={rotationClass} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst WorkList = ({ onSelect }) => {\r\n    const [selectedButton, setSelectedButton] = useState(0);\r\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n    const handleResize = () => {\r\n        setWindowWidth(window.innerWidth);\r\n    };\r\n\r\n    const handleButtonClick = (index) => {\r\n        setSelectedButton(index);\r\n        onSelect(index);\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleResize);\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, []);\r\n\r\n    const cursorStyle = windowWidth <= 405\r\n        ? { transform: `translateX(calc(${selectedButton} * ${(windowWidth * 0.92) * 0.24997}px))` } : windowWidth <= 1080 ?\r\n            { transform: `translateX(calc(${selectedButton} * 93.45px))` } : { transform: `translateY(calc(${selectedButton} * 42px))` };\r\n\r\n    return (\r\n        <div role=\"tablist\" aria-label=\"Job tabs\" className=\"workList\">\r\n            <div className='centerCursor'>\r\n                {workInfos.map((info, index) => (\r\n                    <button\r\n                        key={index}\r\n                        id={`tab-${index}`}\r\n                        role=\"tab\"\r\n                        tabIndex={selectedButton === index ? 0 : -1}\r\n                        aria-selected={selectedButton === index}\r\n                        aria-controls={`panel-${index}`}\r\n                        className={selectedButton === index ? 'selected' : 'unselected'}\r\n                        onClick={() => handleButtonClick(index)}\r\n                    >\r\n                        {info.companyName}\r\n                    </button>\r\n                ))}\r\n                <div className=\"cursorList\" style={cursorStyle}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Work = () => {\r\n    const [selectedButton, setSelectedButton] = useState(0);\r\n\r\n    const handleSelect = (index) => {\r\n        setSelectedButton(index);\r\n    };\r\n\r\n    return (\r\n        <section id='Work' className=\"workContent\">\r\n            <h1 className='titleWork'>\r\n                <span style={{ color: 'aquamarine' }}>II. </span>Where I've worked\r\n            </h1>\r\n            <div className='workListContent'>\r\n                <WorkList onSelect={handleSelect} />\r\n                <WorkInfo selectedButton={selectedButton} />\r\n                <LottieAnimation animationData={animationData} />\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Work;\r\n"],"names":["workInfos","companyName","companyLink","position","dateRange","tasks","LottieAnimation","_ref","animationData","animationContainer","useRef","animationInstance","useEffect","current","lottie","container","renderer","loop","autoplay","setSpeed","handleEnterFrame","playDirection","currentFrame","totalFrames","setDirection","addEventListener","removeEventListener","destroy","_jsx","ref","className","WorkInfoFace","faceClass","children","concat","WorkInfoContent","_jsxs","renderWorkInfo","info","_Fragment","url","text","href","target","rel","map","task","index","createTextLink","WorkInfo","_ref2","selectedButton","rotationClass","setRotationClass","useState","determineRotationClass","buttonIndex","WorkList","_ref3","onSelect","setSelectedButton","windowWidth","setWindowWidth","window","innerWidth","handleResize","cursorStyle","transform","role","id","tabIndex","onClick","handleButtonClick","style","Work","color"],"sourceRoot":""}